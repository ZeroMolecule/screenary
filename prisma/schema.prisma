datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  projects         Project[]
  notes            Note[]
  tasks            Task[]
  linkDirectories  Directory[]
  links            QuickLink[]
  embeddedPages    EmbeddedPage[]
  userProjectOrder UserProjectOrder[]
  userProjects     ProjectUser[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  emailUrl    String?
  calendarUrl String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  users            User[]
  notes            Note[]
  tasks            Task[]
  linkDirectories  Directory[]
  links            QuickLink[]
  embeddedPages    EmbeddedPage[]
  userProjectOrder UserProjectOrder[]
  projectUsers     ProjectUser[]
}

model ProjectUser {
  id        String @id @default(cuid())
  projectId String
  userId    String

  taskStatus TaskStatus?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Note {
  id        String @id @default(cuid())
  projectId String
  userId    String

  content   String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id        String @id @default(cuid())
  projectId String
  userId    String

  title   String
  content String?
  status  TaskStatus @default(TODO)
  order   Int        @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  dueDate   DateTime?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, order])
}

enum TaskStatus {
  TODO
  DONE
}

model Directory {
  id        String  @id @default(cuid())
  projectId String
  userId    String
  parentId  String?

  name      String
  order     Int       @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  project  Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Directory?  @relation("DirectoryToDirectory", fields: [parentId], references: [id])
  children Directory[] @relation("DirectoryToDirectory")
  links    QuickLink[]
}

model QuickLink {
  id          String  @id @default(cuid())
  projectId   String
  userId      String
  directoryId String?

  title     String?
  icon      String?
  url       String
  order     Int       @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  directory Directory? @relation(fields: [directoryId], references: [id])
}

model EmbeddedPage {
  id        String @id @default(cuid())
  projectId String
  userId    String

  title     String?
  icon      String?
  url       String
  order     Int       @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProjectOrder {
  id        String @id @default(cuid())
  userId    String
  projectId String
  order     Int    @default(autoincrement())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, order])
}
